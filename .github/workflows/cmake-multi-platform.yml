# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os:  [windows-latest]
        build_type: [Release]
        c_compiler: [clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          # - os: ubuntu-latest
          #   c_compiler: clang
          #   cpp_compiler: clang++
          # - os: macos-latest
          #   c_compiler: clang
          #   cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # # Turns out the make script won't run for Win32 builds so let's emit an hardcoded pregenerated config instead...
    # - name: Configure cityhash
    #   run: > 
    #    echo "#pragma once\
    #     #if WIN32 || WIN64\
    #     #	define HAVE_BUILTIN_EXPECT 0\
    #             #else\
    #             #	define HAVE_BUILTIN_EXPECT 1\
    #             #endif\
    #             #define HAVE_DLFCN_H 1\
    #             #define HAVE_INTTYPES_H 1\
    #             #define HAVE_MEMORY_H 1\
    #             #define HAVE_STDINT_H 1\
    #             #define HAVE_STDLIB_H 1\
    #             #define HAVE_STRINGS_H 1\
    #             #define HAVE_STRING_H 1\
    #             #define HAVE_SYS_STAT_H 1\
    #             #define HAVE_SYS_TYPES_H 1\
    #             #define HAVE_UNISTD_H 1\
    #             #define LT_OBJDIR ".libs/"\
    #             #define PACKAGE_BUGREPORT "cityhash-discuss@googlegroups.com"\
    #             #define PACKAGE_NAME "CityHash"\
    #             #define PACKAGE_STRING "CityHash 1.1.1"\
    #             #define PACKAGE_TARNAME "cityhash"\
    #             #define PACKAGE_URL ""\
    #             #define PACKAGE_VERSION "1.1.1"\
    #             #define STDC_HEADERS 1\
    #             #if defined AC_APPLE_UNIVERSAL_BUILD\
    #             # if defined __BIG_ENDIAN__\
    #             #  define WORDS_BIGENDIAN 1\
    #             # endif\
    #             #else\
    #             # ifndef WORDS_BIGENDIAN\
    #             # endif\
    #             #endif" > "${{ github.workspace }}/third_party/cityhash/src/config.h"
    
    # - name: Configure CMake (GLFW3)
    #   # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #   # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #   run: >
    #     cmake -B "${{ github.workspace }}/third_party/glfw/"
    #     -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
    #     -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
    #     -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
    #     -S "${{ github.workspace }}/third_party/glfw/"

    # - name: Build GLFW3
    #   # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #   run: cmake --build "${{ github.workspace }}/third_party/glfw/" --config ${{ matrix.build_type }}

    - name: Configure CMake (opentdu)
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build Asset Extractor
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target opentdu_assetExtractor
      
    - name: Build Save Decryptor
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target opentdu_savedecryptor

    - name: Release (Win32)
      uses: softprops/action-gh-release@v2
      with:
        files: |
            "${{ github.workspace }}/build/bin/opentdu_savedecryptor.exe"
            "${{ github.workspace }}/build/bin/opentdu_assetExtractor.exe"
          
    # - name: Deploy Save Decryptor
    #   uses: actions/upload-artifact@v4
    #   with:
    #       name: opentdu_savedecryptor.exe
    #       path: "${{ github.workspace }}/build/bin/opentdu_savedecryptor.exe"

    # - name: Deploy Asset Extractor
    #   uses: actions/upload-artifact@v4
    #   with:
    #       name: opentdu_assetExtractor.exe
    #       path: "${{ github.workspace }}/build/bin/opentdu_assetExtractor.exe"
       
    # - name: Deploy OpenTDU
    #   uses: actions/upload-artifact@v4
    #   with:
    #       name: opentdu.exe
    #       path: "${{ github.workspace }}/build/bin/opentdu.exe"
    
